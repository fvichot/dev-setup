
# if on a Mac
if [[ $(uname -s ) == 'Darwin' ]]; then
  if [[ ! -z $(which brew) ]]; then
    source ~/.homebrew_credentials

    if [ -f $(brew --prefix)/etc/bash_completion ]; then
      . $(brew --prefix)/etc/bash_completion
    fi
  fi

  alias l='ls -lFGA'
  alias subedit="open -a 'sublime text'"

  export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.7/site-packages
# else if Linux/BSD
else 
  alias l='ls -lFA --color=auto'
fi

alias gti='git'
complete -r cd &>/dev/null
complete -r sqlite3 &>/dev/null
complete -r ninja &>/dev/null

function iterm_set_badge {
  MSG="$1"
  export ITERM_BADGE_VALUE="$1"
  echo -en "\e]0;$MSG\a"
}

PS1_REMOTE='37;44'
if [[ -n "$SSH_TTY" ]]; then
  PS1_REMOTE='30;43'
  iterm_set_badge "XXX_BADGE_XXX"
fi

function __is_root {
  if [[ $UID -eq 0 ]]; then
    printf ';41'
  fi
  return 0
}

export GIT_AUTHOR_NAME='Florian Vichot'
export GIT_AUTHOR_EMAIL='florian.vichot@wifirst.fr'
export GIT_COMMITER_NAME=$GIT_AUTHOR_NAME
export GIT_COMMITER_EMAIL=$GIT_AUTHOR_EMAIL

export GIT_PS1_SHOWDIRTYSTATE=0
export GIT_PS1_SHOWSTASHSTATE=0
export GIT_PS1_SHOWUPSTREAM=auto
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_DESCRIBE_STYLE=branch

if [[ -n $(type -t __git_ps1) ]]; then
  export PS1="\[\e[${PS1_REMOTE}m\]\w\[\e[m\]\$(__git_ps1)\n\[\e[36\$(__is_root);1m\]\u\[\e[m\]@\[\e[32m\]\h\[\e[m\]\\$ "
else
  export PS1="\[\e[37;${PS1_REMOTE}m\]\w\[\e[m\]\n\[\e[36\$(__is_root);1m\]\u\[\e[m\]@\[\e[32m\]\h\[\e[m\]\\$ "
fi

export HISTFILESIZE=-1
export HISTSIZE=-1
export HISTCONTROL=ignoreboth
shopt -s histappend
shopt -s no_empty_cmd_completion
shopt -s checkhash
export PROMPT_COMMAND="history -a;$PROMPT_COMMAND"

export EDITOR=nano

export PATH=~/dev/bin:/usr/local/bin:/usr/local/sbin/:$PATH:/sbin:/usr/sbin

function nn {
  ninja "$@" | perl -wln -M'Term::ANSIColor' -e '
  m/note:/ and print "\e[1;32m", "$_", "\e[0m"
  or
  m/error:/i and print "\e[1;91m", "$_", "\e[0m"
  or
  m/warning:/i and print "\e[1;93m", "$_", "\e[0m"
  or
  m/: In /i and print "\e[1;36m", "$_", "\e[0m"
  or
  print; '
  return ${PIPESTATUS[0]}
}

function mm {
  make -j 8  "$@" | perl -wln -M'Term::ANSIColor' -e '
  m/note:/ and print "\e[1;32m", "$_", "\e[0m"
  or
  m/error:/i and print "\e[1;91m", "$_", "\e[0m"
  or
  m/warning:/i and print "\e[1;93m", "$_", "\e[0m"
  or
  m/: In /i and print "\e[1;36m", "$_", "\e[0m"
  or
  print; '
  return ${PIPESTATUS[0]}
}

function nth_field {
  NTH=${1:-1}
  awk "{print \$${NTH}}"
}

function nl2null {
  tr '\n' '\0'
}

function wrap_with {
  new_line="$*"
  while read line; do
    echo ${new_line//\{\}/$line}
  done
}

function repeat {
  COUNT="$1"
  TEXT="$2"
  for i in $(seq 1 $COUNT); do
    echo "$TEXT"
  done
}

function format_hostname {
  HOST="$1"
  if [[ "$HOST" == *.wibox.wifirst.net ]]; then
    HOST=$(echo "$HOST" | cut -f 1 -d '.')
  fi
  HOST=$(echo "$HOST" | cut -f 2 -d '@')
  echo "$HOST"
}

function sshc {
  # if already set, we're already in a sshc session, just re-use it
  if [[ -z "$LC_USER_RCFILE" ]]; then
    local USER_BASHRC=$(cat ~/.user_bashrc)
    if [[ $(uname -s) == Linux ]]; then
      local USER_INPUTRC=$(cat ~/.inputrc | sed -r "s/^([^#]+)/bind '\1'/")
    else
      local USER_INPUTRC=$(cat ~/.inputrc | sed -E "s/^([^#]+)/bind '\1'/")
    fi
    local PROLOG=$(echo "
if [[ -f /etc/motd ]]; then
	cat /etc/motd
fi
# Behave as a login shell, as that's the normal SSH behaviour
if [[ -f /etc/profile ]]; then
	source /etc/profile
fi
if [[ -d /etc/profile.d && -n \"\$(compgen -G '/etc/profile.d/*')\" ]]; then
	source /etc/profile.d/*
fi
if [[ -f ~/.bash_profile ]];then
	source ~/.bash_profile
fi
if [[ -f ~/.bashrc ]];then
	source ~/.bashrc
fi
")
    local LC_USER_RCFILE="
${PROLOG}
${USER_BASHRC}
${USER_INPUTRC}"
  fi
  if [[ -n "$@" ]]; then
    PREV_BADGE="$ITERM_BADGE_VALUE"
    # last argument is a best guess effort
    export ITERM_BADGE_VALUE=$(format_hostname ${@: -1})
    LC_USER_RCFILE=$(echo "$LC_USER_RCFILE" | sed "s/XXX_BADGE_XXX/${ITERM_BADGE_VALUE}/" )
    LC_USER_RCFILE=${LC_USER_RCFILE} /usr/bin/ssh -t "$@" -- 'bash --rcfile <(echo "${LC_USER_RCFILE}")'
    iterm_set_badge "$PREV_BADGE"
  else
    /usr/bin/ssh -h
  fi
}

if [ -n "$(type -t _ssh)" ]; then
  complete -F _ssh sshc
fi
